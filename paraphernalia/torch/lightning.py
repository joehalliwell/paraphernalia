"""
Tools for working with
`PyTorch Lightning <https://www.pytorchlightning.ai/>`_.
"""

import io
import logging
import os
import warnings
from pathlib import Path

try:
    import ipywidgets as widgets
except:
    warnings.warn("Could not import ipywidgets. Some functionality won't work")
    widgets = None

import pytorch_lightning as pl
import torch
from IPython.display import Image, display
from torchvision import transforms as T
from torchvision.utils import make_grid

_LOG = logging.getLogger(__name__)


class ImageCheckpoint(pl.Callback):
    """
    A PyTorch Lightning callback for saving and previewing images.

    Image batches (b, c, h, w) should be generated by `module.forward()`.
    """

    def __init__(self, path_template: str, preview: bool = True):
        """
        `path_template` can draw on the following variables:

        - `index`: the index of the image in the provided batch
        - `model`: the Lightning model
        - `trainer`: the Lightning trainer

        Args:
            path_template (str): a path template as described above
            preview (bool, optional): if true display an ipywidget preview panel. Defaults to True.
        """
        self.path_template = str(path_template)
        _LOG.info(f"Checkpointing images to {self.path_template}")

        self._preview = None
        if preview:
            self._preview = widgets.Output()
            display(self._preview)

    def preview(self, batch):
        """Preview the image batch if configured, otherwise do nothing."""
        if not self._preview:
            return
        img = T.functional.to_pil_image(make_grid(batch, nrow=4, padding=10))
        # HACK: Workaround https://github.com/jupyter-widgets/ipywidgets/issues/3003
        b = io.BytesIO()
        img.save(b, format="PNG")
        img = Image(b.getvalue())

        # In principle could call clear_output. In practice the following works better
        # See: https://stackoverflow.com/questions/63319165/clear-ipywidget-output-from-inside-thread
        self._preview.outputs = []
        self._preview.append_display_data(img)

    def save(self, batch, module, trainer):
        """Save the image batch."""
        if batch.shape[0] > 1 and "{index}" not in self.path.template:
            warnings.warn(
                "Image batch size > 1, but template doesn't use {index}. Saving entire grid."
            )
            batch = make_grid(batch, nrow=4, padding=10)

        for i in range(batch.shape[0]):
            img = T.functional.to_pil_image(batch[i, :])
            filename = Path(
                str.format(self.path_template, module=module, trainer=trainer, index=i)
            )
            os.makedirs(filename.parent, exist_ok=True)
            img.save(filename)
            _LOG.info(f"Saved image as {filename}")

    def checkpoint(self, module, trainer):
        """
        Main checkpoint function, called on epoch start and training end.
        """
        with torch.no_grad():
            module.eval()
            img = module.forward()
            module.train()

        self.save(img, module, trainer)
        self.preview(img)

    def on_epoch_start(self, trainer, module):
        self.checkpoint(module, trainer)

    def on_train_end(self, trainer, module):
        self.checkpoint(module, trainer)
